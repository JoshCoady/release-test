name: CI
on:
  pull_request:
  push:
    branches:
      - dev
      - master
      - production

defaults:
  run:
    shell: bash

jobs:
  config:
    runs-on: ubuntu-latest
    env:
      DEPLOY: false
      TARGET: PR
      TEST: true
    outputs:
      deploy: ${{ env.DEPLOY }}
      target: ${{ env.TARGET }}
      test: ${{ env.TEST }}
      A_T: ${{ env.A_T }}
      B_T: ${{ env.B_T }}
      C_F: ${{ env.C_F }}
      D_F: ${{ env.D_F }}
      E_F: ${{ env.E_F }}
      F_F: ${{ env.F_F }}
      G_T: ${{ env.G_T }}
      H_T: ${{ env.H_T }}
    steps:
      - run: |
          echo "A_T=true" >> $GITHUB_ENV
          echo "B_T=1" >> $GITHUB_ENV
          echo "C_F=false" >> $GITHUB_ENV
          echo "D_F=0" >> $GITHUB_ENV
          echo "E_F=" >> $GITHUB_ENV
          echo "F_F=null" >> $GITHUB_ENV
          echo "G_T=abc" >> $GITHUB_ENV
          echo "H_T=123" >> $GITHUB_ENV
      
      - name: A_T
        if: env.A_T
        run: echo "$A_T"
      
      - name: B_T
        if: env.B_T
        run: echo "$B_T"
      
      - name: C_F
        if: env.C_F
        run: echo "$C_F"
      
      - name: D_F
        if: env.D_F
        run: echo "$D_F"
      
      - name: E_F
        if: env.E_F
        run: echo "$E_F"
      
      - name: F_F
        if: env.F_F
        run: echo "$F_F"
      
      - name: G_T
        if: env.G_T
        run: echo "$G_T"
      
      - name: H_T
        if: env.H_T
        run: echo "$H_T"
        
      - name: Skip testing if draft pull request
        if: github.event_name == 'pull_request' && github.event.pull_request.draft
        run: echo "::set-env name=TEST::false"

      - name: Deploy to PROD
        if: github.event_name == 'push' && github.ref == 'refs/heads/production'
        run: |
          echo "DEPLOY=true" >> $GITHUB_ENV
          echo "TARGET=PROD" >> $GITHUB_ENV

      - name: Deploy to TEST
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          echo "DEPLOY=true" >> $GITHUB_ENV
          echo "TARGET=TEST" >> $GITHUB_ENV

      - name: Deploy to DEV
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        run: |
          echo "DEPLOY=true" >> $GITHUB_ENV
          echo "TARGET=DEV" >> $GITHUB_ENV
          echo "TEST=false" >> $GITHUB_ENV

#  test1_out:
#    runs-on: ubuntu-latest
#    outputs:
#      test1_var: ${{ env.TEST1_VAR }}
#    steps:
#      - run: echo "::set-env name=TEST1_VAR::Test1_Val"
##      - name: TF
##        if: true
##        if: false
##        run: echo "TF"
##      - name: FT
##        if: false
##        if: true
##        run: echo "FT"
##      - name: TT
##        if: true
##        if: true
##        run: echo "TT"
##      - name: FF
##        if: false
##        if: false
##        run: echo "FF"
#
#  test1_in:
#    needs: test1_out
#    runs-on: ubuntu-latest
#    if: needs.test1_out.outputs.test1_var
#    steps:
#      - run: echo '${{ needs.test1_out.outputs.test1_var }}'
#  test2_out:
#    runs-on: ubuntu-latest
#    outputs:
#      test2_var: ${{ env.TEST2_VAR }}
#    steps:
#      - run: echo "not setting var"
#  test2_in:
#    needs: test2_out
#    runs-on: ubuntu-latest
#    if: needs.test2_out.outputs.test2_var
#    steps:
#      - run: echo '${{ needs.test2_out.outputs.test2_var }}'

  build:
    runs-on: ubuntu-latest
    needs: config
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - run: |
          echo deploy="${{ needs.config.outputs.deploy }}"
          echo target="${{ needs.config.outputs.target }}"
          echo test="${{ needs.config.outputs.test }}"
          printenv

      - name: Test
        if: needs.config.outputs.test == 'true'
        run: ./test.sh

  deploy:
    if: needs.config.outputs.deploy == 'true'
    runs-on: ubuntu-latest
    needs: [config, build]
    steps:
      
      - name: A_T
        if: needs.config.outputs.A_T
        run: echo "${{ needs.config.outputs.A_T }}"
      
      - name: B_T
        if: needs.config.outputs.B_T
        run: echo "${{ needs.config.outputs.B_T }}"
      
      - name: C_F
        if: needs.config.outputs.C_F
        run: echo "${{ needs.config.outputs.C_F }}"
      
      - name: D_F
        if: needs.config.outputs.D_F
        run: echo "${{ needs.config.outputs.D_F }}"
      
      - name: E_F
        if: needs.config.outputs.E_F
        run: echo "${{ needs.config.outputs.E_F }}"
      
      - name: F_F
        if: needs.config.outputs.F_F
        run: echo "${{ needs.config.outputs.F_F }}"
      
      - name: G_T
        if: needs.config.outputs.G_T
        run: echo "${{ needs.config.outputs.G_T }}"
      
      - name: H_T
        if: needs.config.outputs.H_T
        run: echo "${{ needs.config.outputs.H_T }}"
        
      - name: Checkout
        uses: actions/checkout@v2

      - name: Release
        id: release
        uses: cycjimmy/semantic-release-action@v2
        with:
          dry_run: ${{ needs.config.outputs.target == 'DEV' }}
#          extra_plugins: |
#            @semantic-release/changelog
#            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Details
        run: |
          echo pub? ${{ steps.release.outputs.new_release_published }}
          echo v${{ steps.release.outputs.new_release_version }}
          echo "${{ steps.release.outputs.new_release_channel }}"
          echo "${{ steps.release.outputs.new_release_notes }}"

#      - name: Merge
#        if: steps.release.outputs.new_release_published == 'true' && github.ref == 'refs/heads/prod'
#        run: |
#          git checkout master
#          git merge prod
#          git push origin master

      - name: Slackify release notes
        id: slackify_release_notes
        if: steps.release.outputs.new_release_published == 'true'
        uses: LoveToKnow/slackify-markdown-action@v1
        with:
          text: ${{ steps.release.outputs.new_release_notes }}

      - name: Blockify release notes
        id: blockify_release_notes
        if: steps.release.outputs.new_release_published == 'true'
        env:
          NEW_VERSION: v${{ steps.release.outputs.new_release_version }}
          REPO_BASE_URL: https://github.com/${{ github.repository }}
          TARGET: ${{ needs.config.outputs.target }}
        run: |
          # split release notes into array of lines (and drop blank lines)
          readarray -t lines <<<"$(echo '${{ steps.slackify_release_notes.outputs.text }}' | sed '/^$/d')"

          # collect release notes into blocks of no more than 3000 chars each (slack max)
          sections=()
          text="${lines[1]}"
          for line in "${lines[@]:2}"
          do
            if [ $(( ${#text} + ${#line} )) -ge 3000 ] || [[ "$line" == "*"* ]] ; then
              sections+=("$text")
              text=''
            fi
            text+="\n$line"
          done
          sections+=("$text")

          # set default values
          compare_url="$(sed 's:.*<\(.*\)|.*:\1:' <<< "${lines[0]}")"
          code_url="$REPO_BASE_URL/tree/$NEW_VERSION"
          context_release='{
                \"type\": \"mrkdwn\",
                \"text\": \":label: *<'"$REPO_BASE_URL/releases/tag/$NEW_VERSION|$NEW_VERSION"'>*\"
              },'
          channel='#cms-dev'
          message="Deploying to $TARGET"
          version_suffix=" ($NEW_VERSION)"

          # make target-specific changes
          case $TARGET in
            PROD)
              channel='#ltk-cms'
              icon=':rocket:'
              message='Release Deploying'
              ;;
            TEST)
              icon=':mag:'
              ;;
            DEV)
              code_url="$REPO_BASE_URL/tree/dev"
              compare_url="$REPO_BASE_URL/compare/dev"
              context_release=''
              icon=':construction:'
              sections=()
              version_suffix=''
              ;;
          esac

          # output env vars to use in next step
          echo "SLACK_TEXT=$icon $message$version_suffix" >> $GITHUB_ENV
          echo "SLACK_CHANNEL=$channel" >> $GITHUB_ENV
          echo 'SLACK_BLOCKS<<EOF' >> $GITHUB_ENV
          echo '
            {
              \"type\": \"header\",
              \"text\": {
                \"type\": \"plain_text\",
                \"text\": \"'"$icon $message"'\"
              }
            }' >> $GITHUB_ENV
          if [ ${#sections[@]} -gt 0 ]
          then
            printf ',
              {
                \\"type\\": \\"section\\",
                \\"text\\": {
                  \\"type\\": \\"mrkdwn\\",
                  \\"text\\": \\"%s\\"
                }
              }\n' "${sections[@]}" >> $GITHUB_ENV
          fi
          echo ',
            {
              \"type\": \"context\",
              \"elements\": ['"$context_release"' {
                \"type\": \"mrkdwn\",
                \"text\": \":octocat: <'"$code_url"'|code>\"
              }, {
                \"type\": \"mrkdwn\",
                \"text\": \":bookmark_tabs: <'"$compare_url"'#files_bucket|changes>\"
              }]
            }' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Notify slack
        if: steps.release.outputs.new_release_published == 'true'
#        uses: aibexhq/slack-rich-notify@v1.0.2
#        with:
#          token: ${{secrets.SLACK_BUILDBOT_TOKEN}} # your slack bot key
#          secret: ${{secrets.SS}} # your slack signing secret
#          channel: U081Z9XTP # gasdl
#          message: |
#            ${{ steps.slackify_release_notes.outputs.text }}
        uses: pullreminders/slack-action@v1.0.9
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BUILDBOT_TOKEN }}
        with:
          args: '{
            \"channel\": \"U081Z9XTP\",
            \"text\": \"${{ env.SLACK_TEXT }}\",
            \"blocks\": [${{ env.SLACK_BLOCKS }}]
          }'
