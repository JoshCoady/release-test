name: CI
on:
  pull_request:
  push:
    branches:
      - master
      - stable
      - sandbox

defaults:
  run:
    shell: bash

jobs:
  config:
    runs-on: ubuntu-latest
    env:
      DEPLOY: false
      TARGET: PR
      TEST: true
    outputs:
      deploy: ${{ env.DEPLOY }}
      target: ${{ env.TARGET }}
      test: ${{ env.TEST }}
    steps:
      - name: Skip testing if draft pull request
        if: github.event_name == 'pull_request' && github.event.pull_request.draft
        run: echo "::set-env name=TEST::false"

      - name: Deploy to PROD
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          echo "DEPLOY=true" >> $GITHUB_ENV
          echo "TARGET=PROD" >> $GITHUB_ENV

      - name: Deploy to TEST
        if: github.event_name == 'push' && github.ref == 'refs/heads/stable'
        run: |
          echo "DEPLOY=true" >> $GITHUB_ENV
          echo "TARGET=TEST" >> $GITHUB_ENV

      - name: Deploy to DEV
        if: github.event_name == 'push' && github.ref == 'refs/heads/sandbox'
        run: |
          echo "DEPLOY=true" >> $GITHUB_ENV
          echo "TARGET=DEV" >> $GITHUB_ENV
          echo "TEST=false" >> $GITHUB_ENV

#  test1_out:
#    runs-on: ubuntu-latest
#    outputs:
#      test1_var: ${{ env.TEST1_VAR }}
#    steps:
#      - run: echo "::set-env name=TEST1_VAR::Test1_Val"
##      - name: TF
##        if: true
##        if: false
##        run: echo "TF"
##      - name: FT
##        if: false
##        if: true
##        run: echo "FT"
##      - name: TT
##        if: true
##        if: true
##        run: echo "TT"
##      - name: FF
##        if: false
##        if: false
##        run: echo "FF"
#
#  test1_in:
#    needs: test1_out
#    runs-on: ubuntu-latest
#    if: needs.test1_out.outputs.test1_var
#    steps:
#      - run: echo '${{ needs.test1_out.outputs.test1_var }}'
#  test2_out:
#    runs-on: ubuntu-latest
#    outputs:
#      test2_var: ${{ env.TEST2_VAR }}
#    steps:
#      - run: echo "not setting var"
#  test2_in:
#    needs: test2_out
#    runs-on: ubuntu-latest
#    if: needs.test2_out.outputs.test2_var
#    steps:
#      - run: echo '${{ needs.test2_out.outputs.test2_var }}'

  build:
    runs-on: ubuntu-latest
    needs: config
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - run: |
          echo deploy="${{ needs.config.outputs.deploy }}"
          echo target="${{ needs.config.outputs.target }}"
          echo test="${{ needs.config.outputs.test }}"

      - name: Test
        if: needs.config.outputs.test == 'true'
        run: ./test.sh

  deploy:
    if: needs.config.outputs.deploy == 'true'
    runs-on: ubuntu-latest
    needs: [config, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Release
        id: release
        uses: cycjimmy/semantic-release-action@v2
        with:
          dry_run: ${{ needs.config.outputs.target == 'DEV' }}
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Details
        run: |
          echo pub? ${{ steps.release.outputs.new_release_published }}
          echo v${{ steps.release.outputs.new_release_version }}
          echo "${{ steps.release.outputs.new_release_channel }}"
          echo "${{ steps.release.outputs.new_release_notes }}"

#      - name: Merge
#        if: steps.release.outputs.new_release_published == 'true' && github.ref == 'refs/heads/prod'
#        run: |
#          git checkout master
#          git merge prod
#          git push origin master

      - name: Slackify release notes
        id: slackify_release_notes
        if: steps.release.outputs.new_release_published == 'true'
        uses: LoveToKnow/slackify-markdown-action@v1
        with:
          text: ${{ steps.release.outputs.new_release_notes }}

      - name: Blockify release notes
        id: blockify_release_notes
        if: steps.release.outputs.new_release_published == 'true'
        env:
          TARGET: ${{ needs.config.outputs.target }}
        run: |
          readarray -t lines <<<"$(echo '${{ steps.slackify_release_notes.outputs.text }}' | sed '/^$/d')"

          echo "COMPARE_URL=$(sed 's/.*<\(.*\)\|.*/\1/' <<< "$lines[0]")" >> $GITHUB_ENV

          channel='#cms-dev'
          message="Deploying to $TARGET"
          case $TARGET in
            PROD)
              channel='#ltk-cms'
              message='Release Deploying'
              icon=':rocket:'
              ;;
            TEST)
              icon=':mag:'
              ;;
            *)
              icon=':construction:'
              ;;
          esac
          echo "SLACK_CHANNEL=$channel" >> $GITHUB_ENV
          echo "SUMMARY=$icon $message" >> $GITHUB_ENV

          # collect release notes into blocks of no more than 3000 chars each (slack max)
          sections=()
          text="${lines[1]}"
          for line in "${lines[@]:2}"
          do
            if [ $(( ${#text} + ${#line} )) -ge 3000 ] || [[ "$line" == "*"* ]] ; then
              sections+=("$text")
              text=""
            fi
            text+="\n$line"
          done
          sections+=("$text")
          echo 'NOTES_BLOCKS<<EOF' >> $GITHUB_ENV
          printf '
            {
              \\"type\\": \\"section\\",
              \\"text\\": {
                \\"type\\": \\"mrkdwn\\",
                \\"text\\": \\"%s\\"
              }
            },' "${sections[@]}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Notify slack
        if: steps.release.outputs.new_release_published == 'true'
#        uses: aibexhq/slack-rich-notify@v1.0.2
#        with:
#          token: ${{secrets.SLACK_BUILDBOT_TOKEN}} # your slack bot key
#          secret: ${{secrets.SS}} # your slack signing secret
#          channel: U081Z9XTP # gasdl
#          message: |
#            ${{ steps.slackify_release_notes.outputs.text }}
        uses: pullreminders/slack-action@v1.0.9
        env:
          NEW_VERSION: v${{ steps.release.outputs.new_release_version }}
          REPO_BASE_URL: ${{ env.GITHUB_SERVER_URL }}/${{ env.GITHUB_REPOSITORY }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BUILDBOT_TOKEN }}
          SUMMARY: Deploying to ${{ needs.config.outputs.target }}
        with:
          args: '{
            \"channel\": \"U081Z9XTP\",
            \"text\": \"${{ env.SLACK_CHANNEL }} ${{ env.SUMMARY }} (${{ env.NEW_VERSION }})\",
            \"blocks\": [{
              \"type\": \"header\",
              \"text\": {
                \"type\": \"plain_text\",
                \"text\": \"${{ env.SUMMARY }}\"
              }
            },
            ${{ env.NOTES_BLOCKS }}
            {
              \"type\": \"context\",
              \"elements\": [{
                \"type\": \"mrkdwn\",
                \"text\": \":label: *<${{ env.REPO_BASE_URL }}/releases/tag/${{ env.NEW_VERSION }}|${{ env.NEW_VERSION }}>*\"
              }, {
                \"type\": \"mrkdwn\",
                \"text\": \":octocat: <${{ env.REPO_BASE_URL }}/tree/${{ env.NEW_VERSION }}|code>\"
              }, {
                \"type\": \"mrkdwn\",
                \"text\": \":bookmark_tabs: <${{ env.COMPARE_URL }}#files_bucket|changes>\"
              }]
            }]
          }'
